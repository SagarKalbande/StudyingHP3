#include<stdio.h>
#include<string.h>

int main(){

	char Sq[] = "AKLMAATCD";			//Sq
	char Sq1[500][500] = { "", "" };		//new 2d array for storing Sq in blocks of W letters
	char Si[] = "ALPQRKLMMAKLPPRTLQ";	//Si
	char Si1[500][500] = { "", "" };		//new 2d array for storing Si in blocks of W letters
	int w = 4;							//window width
	int T = 3;							//thresh-hold

	//for dividing Sq into blocks of width W (using 2d arrays)
	for (int i = 0; i < strlen(Sq) - w + 1; i++)
	{
		int a = 0;
		for (int j = i; j < i + w; j++)
		{
			Sq1[i][a] = Sq[j];
			printf("%c", Sq1[i][a]);
			a++;
		}
		printf("\n");
	}

	printf("\n");

	//for dividing Si into blocks of width W (using 2d arrays)
	for (int i = 0; i < strlen(Si) - w + 1; i++)
	{
		int a = 0;
		for (int j = i; j < i + w; j++)
		{
			Si1[i][a] = Si[j];
			printf("%c", Si1[i][a]);
			a++;
		}
		printf("\n");
	}

	printf("\n");

	//Score[1][2] is the number of letters that match from Sq1[1] and Si1[2] (i.e. from the blocks)
	int score[100][100] = { 0 };
	for (int b = 0; b < strlen(Sq) - w + 1; b++)
	{
		for (int i = 0; i < strlen(Si) - w + 1; i++)
		{
			for (int j = 0; j < w; j++)
			{
				if (Sq1[b][j] == Si1[i][j]){
					score[b][i]++;
				}
			}
		}
	}

	char M[500][500]; //Mij is a 2d array where the longer forms of seed are stored
	int x = 0;
	int count = 0; // count is to keep track of how many seeds are found
	//printf("The following is matrix of how many letters match individually between Sq and Si each block of window w\n\n");
	for (int b = 0; b < strlen(Sq) - w + 1; b++)
	{
		for (int i = 0; i < strlen(Si) - w + 1; i++)
		{
			
			if (score[b][i] >= T)
			{
				count++;
				printf("Seed is: ");
				for (int n = 0; n < w; n++)
				{
					printf("%c", Si[i+n]);
				}

				int y = 0;
				for (int j = i - 1; j < i - 1 + strlen(Sq); j++)
				{
					M[x][y] = Si[j];
					//printf("%c", M[x][y]);
					y++;
				}
				printf("\n");
				x++;
			}
		}

	}


	for (int i = 0; i < count; i++)
	{
		printf("Expanded form :");
		for (int j = 0; j < strlen(Sq); j++)
		{
			printf("%c", M[i][j]);
		}
		printf("\n");
	}





}
